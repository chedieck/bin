#!/bin/bash

# Prints all batteries, their percentage remaining and an emoji corresponding
# to charge status (🔌 for plugged up, 🔋 for discharging on battery, etc.).
tmpfile=/tmp/brightness_bar.id
INCREMENT_STEP=5
brightness_bar_id=$(cat "$tmpfile" 2> /dev/null)

function notify_brightness() {
        new=$(xbacklight -get | sed 's/\..*//')
        if [ -z "$brightness_bar_id" ]; then 
            brightness_bar_id=$(notify-send -p "🔆 Brightness" "$new"%) 
        else
            notify-send -r "$brightness_bar_id" "🔆 Brightness" "$new"%
        fi
        echo "$brightness_bar_id" > "$tmpfile"
}

case $BUTTON in
	3) notify-send "🔋 Battery module" "🔋: discharging
🛑: not charging
♻: stagnant charge
🔌: charging
⚡: charged
❗: battery very low!
- Scroll to change adjust xbacklight." ;;
	4) xbacklight -inc "$INCREMENT_STEP"
        notify_brightness
    ;;
    5)
        current=$(xbacklight -get | sed 's/\..*//')
        ([[ $current -ge 5 ]] && xbacklight -dec "$INCREMENT_STEP" ) ||  xbacklight -set 1
        notify_brightness
        ;;
	6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# Loop through all attached batteries and format the info
for battery in /sys/class/power_supply/BAT?*; do
	# If non-first battery, print a space separator.
	[ -n "${capacity+x}" ] && printf " "
	# Sets up the status and capacity
	case "$(cat "$battery/status" 2>&1)" in
		"Full") status="⚡" ;;
		"Discharging") status="🔋" ;;
		"Charging") status="🔌" ;;
		"Not charging") status="🛑" ;;
		"Unknown") status="♻️" ;;
		*) exit 1 ;;
	esac
	capacity="$(cat "$battery/capacity" 2>&1)"
	# Will make a warn variable if discharging and low
	[ "$status" = "🔋" ] && [ "$capacity" -le 25 ] && warn="❗"
	# Prints the info
	printf "%s%s%d%%" "$status" "$warn" "$capacity"; unset warn
done && printf "\\n"
